Input:
List Int -> List Int
[[1,2],[3,4],[5,6]] -> [1,3,5]
[[7,8,9],[10,11,12]] -> [7,10]
[[42]] -> [42]
[] -> []
Output:
lambda xs.map xs head

Input:
List Int -> List Int
[9,1,3] -> [18,2,6]
[8,5,3] -> [16,10,6]
Output:
lambda xs.map xs (* 2)

Input:
List Int -> List Int
[1,2,3,4,5] -> [1,4,9,16,25]
[0,10] -> [0,100]
[] -> []
Output:
lambda xs.map xs (lambda x.** x 2)

Input:
List Int -> List Int
[1,2,3,4,5] -> [0,1,2,3,4]
[10,20,30] -> [9,19,29]
[] -> []
Output:
lambda xs.map xs (+ -1)

Input:
List Int -> List Int
[1,2,3,4,5] -> [2,3,4,5,6]
[] -> []
[9,8,5] -> [10,9,6]
Output:
lambda xs.map xs (+ 1)

Input:
List Int -> Int
[1,2,3,4,5] -> 15
[7,8] -> 15
[] -> 0
[100] -> 100
Output:
lambda xs.lfold xs 0 add

Input:
List Int -> List Int
[1,2,3,4,5] -> [1,0,1,0,1]
[6,7,8,9] -> [0,1,0,1]
[] -> []
Output:
lambda xs.map xs (lambda x.% x 2)

Input:
List Int -> List Int
[2,3,4] -> [8,27,64]
[1,10] -> [1,1000]
[] -> []
Output:
lambda xs.map xs (lambda x.** x 3)

Input:
List Int -> List Int
[1,2,3,4,5] -> 3
[7,8,9,10,11,12] -> 9
[42] -> 42
[] -> 0
Output:
lambda xs.if (is_nil xs) 0 (div (lfold xs 0 add) (length xs))

Input:
String -> String
["hello","world","functional","programming"] -> ["olleh","dlrow","lanoitcnuf","gnimmargorp"]
["a","bc","def"] -> ["a","cb","fed"]
["xyz"] -> ["zyx"]
Output:
lambda xs.map xs reverse

Input:
String -> String
"hello world" -> "HELLO WORLD"
"functional" -> "FUNCTIONAL"
"a" -> "A"
"" -> []
Output:
lambda str.map str (lambda c.chr (if (lt c 'a') (ord c) (sub (ord c) 32)))

Input:
List T -> List T
[1,2,3,4,5] -> [1,2,3,4,5,5,4,3,2,1]
["a","b","c"] -> ["a","b","c","c","b","a"]
[] -> []
Output:
lambda xs.concat xs (reverse xs)
